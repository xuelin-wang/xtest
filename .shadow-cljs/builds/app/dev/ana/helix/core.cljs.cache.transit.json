["^ ","~:output",["^ ","~:js","goog.provide('helix.core');\ngoog.scope(function(){\n  helix.core.goog$module$goog$object = goog.module.get('goog.object');\n});\nvar module$node_modules$react$index=shadow.js.require(\"module$node_modules$react$index\", {});\nvar module$node_modules$react$jsx_runtime=shadow.js.require(\"module$node_modules$react$jsx_runtime\", {});\nif((typeof Symbol !== 'undefined')){\n(cljs.core.symbol.prototype.cljs$core$IPrintWithWriter$ = cljs.core.PROTOCOL_SENTINEL);\n\n(cljs.core.symbol.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = (function (sym,writer,_){\nvar sym__$1 = this;\nreturn cljs.core._write(writer,[\"\\\"\",cljs.core.str.cljs$core$IFn$_invoke$arity$1(sym__$1.toString()),\"\\\"\"].join(''));\n}));\n} else {\n}\n/**\n * React.Fragment. See `helix.core/<>` for macro version.\n */\nhelix.core.Fragment = module$node_modules$react$index.Fragment;\n/**\n * React.Suspense. See `helix.core/suspense` for macro version.\n */\nhelix.core.Suspense = module$node_modules$react$index.Suspense;\nhelix.core.create_element = module$node_modules$react$index.createElement;\n/**\n * React.createContext\n */\nhelix.core.create_context = module$node_modules$react$index.createContext;\nhelix.core.get_react = (function helix$core$get_react(){\nreturn module$node_modules$react$index;\n});\nhelix.core.jsx = module$node_modules$react$jsx_runtime.jsx;\nhelix.core.jsxs = module$node_modules$react$jsx_runtime.jsxs;\n/**\n * Create a new React element from a valid React type.\n * \n *   Example:\n *   ```\n *   ($ MyComponent\n * \"child1\"\n * ($ \"span\"\n *   {:style {:color \"green\"}}\n *   \"child2\" ))\n *   ```\n */\nhelix.core.$ = (function helix$core$$(var_args){\nvar args__5775__auto__ = [];\nvar len__5769__auto___21864 = arguments.length;\nvar i__5770__auto___21865 = (0);\nwhile(true){\nif((i__5770__auto___21865 < len__5769__auto___21864)){\nargs__5775__auto__.push((arguments[i__5770__auto___21865]));\n\nvar G__21870 = (i__5770__auto___21865 + (1));\ni__5770__auto___21865 = G__21870;\ncontinue;\n} else {\n}\nbreak;\n}\n\nvar argseq__5776__auto__ = ((((1) < args__5775__auto__.length))?(new cljs.core.IndexedSeq(args__5775__auto__.slice((1)),(0),null)):null);\nreturn helix.core.$.cljs$core$IFn$_invoke$arity$variadic((arguments[(0)]),argseq__5776__auto__);\n});\n\n(helix.core.$.cljs$core$IFn$_invoke$arity$variadic = (function (type,args){\nvar _QMARK_p = cljs.core.first(args);\nvar _QMARK_c = cljs.core.rest(args);\nvar native_QMARK_ = (function (){var or__5045__auto__ = (type instanceof cljs.core.Keyword);\nif(or__5045__auto__){\nreturn or__5045__auto__;\n} else {\nvar or__5045__auto____$1 = typeof type === 'string';\nif(or__5045__auto____$1){\nreturn or__5045__auto____$1;\n} else {\nreturn new cljs.core.Keyword(null,\"native\",\"native\",-613060878).cljs$core$IFn$_invoke$arity$1(cljs.core.meta(type));\n}\n}\n})();\nvar has_props_QMARK_ = ((cljs.core.map_QMARK_(_QMARK_p)) || ((_QMARK_p == null)));\nvar children_STAR_ = ((has_props_QMARK_)?_QMARK_c:args);\nvar children = ((cljs.core.next(children_STAR_))?cljs.core.into_array.cljs$core$IFn$_invoke$arity$1(children_STAR_):cljs.core.first(children_STAR_));\nvar props_STAR_ = (function (){var G__21744 = cljs.core.PersistentArrayMap.EMPTY;\nvar G__21744__$1 = ((has_props_QMARK_)?cljs.core.conj.cljs$core$IFn$_invoke$arity$2(G__21744,_QMARK_p):G__21744);\nif((!((children == null)))){\nreturn cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(G__21744__$1,new cljs.core.Keyword(null,\"children\",\"children\",-940561982),children);\n} else {\nreturn G__21744__$1;\n}\n})();\nvar props = (cljs.core.truth_(native_QMARK_)?helix.impl.props._dom_props.cljs$core$IFn$_invoke$arity$1(props_STAR_):helix.impl.props._props.cljs$core$IFn$_invoke$arity$1(props_STAR_));\nvar key = new cljs.core.Keyword(null,\"key\",\"key\",-1516042587).cljs$core$IFn$_invoke$arity$1(props_STAR_);\nvar emit_fn = ((cljs.core.next(children_STAR_))?helix.core.jsxs:helix.core.jsx);\nvar type_SINGLEQUOTE_ = (((type instanceof cljs.core.Keyword))?cljs.core.name(type):type);\nif((!((key == null)))){\nreturn (emit_fn.cljs$core$IFn$_invoke$arity$3 ? emit_fn.cljs$core$IFn$_invoke$arity$3(type_SINGLEQUOTE_,props,key) : emit_fn.call(null,type_SINGLEQUOTE_,props,key));\n} else {\nreturn (emit_fn.cljs$core$IFn$_invoke$arity$2 ? emit_fn.cljs$core$IFn$_invoke$arity$2(type_SINGLEQUOTE_,props) : emit_fn.call(null,type_SINGLEQUOTE_,props));\n}\n}));\n\n(helix.core.$.cljs$lang$maxFixedArity = (1));\n\n/** @this {Function} */\n(helix.core.$.cljs$lang$applyTo = (function (seq21734){\nvar G__21735 = cljs.core.first(seq21734);\nvar seq21734__$1 = cljs.core.next(seq21734);\nvar self__5754__auto__ = this;\nreturn self__5754__auto__.cljs$core$IFn$_invoke$arity$variadic(G__21735,seq21734__$1);\n}));\n\n/**\n * Dynamically create a new React element from a valid React type.\n * \n *   `$` can typically be faster, because it will statically process the arguments\n *   at macro-time if possible.\n * \n *   Example:\n *   ```\n *   ($$ MyComponent\n * \"child1\"\n * ($$ \"span\"\n *   {:style {:color \"green\"}}\n *   \"child2\" ))\n *   ```\n */\nhelix.core.$$ = helix.core.$;\n\n/**\n * @interface\n */\nhelix.core.IExtractType = function(){};\n\nvar helix$core$IExtractType$_type$dyn_21876 = (function (factory){\nvar x__5393__auto__ = (((factory == null))?null:factory);\nvar m__5394__auto__ = (helix.core._type[goog.typeOf(x__5393__auto__)]);\nif((!((m__5394__auto__ == null)))){\nreturn (m__5394__auto__.cljs$core$IFn$_invoke$arity$1 ? m__5394__auto__.cljs$core$IFn$_invoke$arity$1(factory) : m__5394__auto__.call(null,factory));\n} else {\nvar m__5392__auto__ = (helix.core._type[\"_\"]);\nif((!((m__5392__auto__ == null)))){\nreturn (m__5392__auto__.cljs$core$IFn$_invoke$arity$1 ? m__5392__auto__.cljs$core$IFn$_invoke$arity$1(factory) : m__5392__auto__.call(null,factory));\n} else {\nthrow cljs.core.missing_protocol(\"IExtractType.-type\",factory);\n}\n}\n});\n/**\n * Extracts the underlying type from the factory function.\n */\nhelix.core._type = (function helix$core$_type(factory){\nif((((!((factory == null)))) && ((!((factory.helix$core$IExtractType$_type$arity$1 == null)))))){\nreturn factory.helix$core$IExtractType$_type$arity$1(factory);\n} else {\nreturn helix$core$IExtractType$_type$dyn_21876(factory);\n}\n});\n\n/**\n * Geven a factory function created by `helix.core/factory` or `cljs-factory`,\n *   returns the original component that the factory creates elements of.\n */\nhelix.core.type = (function helix$core$type(f){\nreturn helix.core._type(f);\n});\n/**\n * Creates a factory function for a React component, that when called returns an\n *   element with the props and children passed to the factory.\n * \n *   Use `helix.core/type` to extract the original React component.\n */\nhelix.core.factory = (function helix$core$factory(type){\nvar x21785 = (function() { \nvar helix$core$factory_$_factory__delegate = function (args){\nreturn cljs.core.apply.cljs$core$IFn$_invoke$arity$3(helix.core.$,type,args);\n};\nvar helix$core$factory_$_factory = function (var_args){\nvar args = null;\nif (arguments.length > 0) {\nvar G__21882__i = 0, G__21882__a = new Array(arguments.length -  0);\nwhile (G__21882__i < G__21882__a.length) {G__21882__a[G__21882__i] = arguments[G__21882__i + 0]; ++G__21882__i;}\n  args = new cljs.core.IndexedSeq(G__21882__a,0,null);\n} \nreturn helix$core$factory_$_factory__delegate.call(this,args);};\nhelix$core$factory_$_factory.cljs$lang$maxFixedArity = 0;\nhelix$core$factory_$_factory.cljs$lang$applyTo = (function (arglist__21883){\nvar args = cljs.core.seq(arglist__21883);\nreturn helix$core$factory_$_factory__delegate(args);\n});\nhelix$core$factory_$_factory.cljs$core$IFn$_invoke$arity$variadic = helix$core$factory_$_factory__delegate;\nreturn helix$core$factory_$_factory;\n})()\n;\n(x21785.helix$core$IExtractType$ = cljs.core.PROTOCOL_SENTINEL);\n\n(x21785.helix$core$IExtractType$_type$arity$1 = (function (_){\nvar ___$1 = this;\nreturn type;\n}));\n\nreturn x21785;\n});\n/**\n * Creates a factory function for a component defined via `defnc`, that when\n *   called returns an element with the props and children passed to the factory.\n *   Slightly more performant than `factory` when used with a helix component.\n * \n *   Use `helix.core/type` to extract the original component this was called with.\n */\nhelix.core.cljs_factory = (function helix$core$cljs_factory(type){\nvar x21787 = (function() { \nvar helix$core$cljs_factory_$_factory__delegate = function (args){\nif(cljs.core.map_QMARK_(cljs.core.first(args))){\nvar props = cljs.core.first(args);\nreturn cljs.core.apply.cljs$core$IFn$_invoke$arity$4(module$node_modules$react$index.createElement,type,({\"helix/props\": cljs.core.dissoc.cljs$core$IFn$_invoke$arity$variadic(props,new cljs.core.Keyword(null,\"key\",\"key\",-1516042587),cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([new cljs.core.Keyword(null,\"ref\",\"ref\",1289896967)], 0)), \"key\": cljs.core.get.cljs$core$IFn$_invoke$arity$3(props,new cljs.core.Keyword(null,\"key\",\"key\",-1516042587),undefined), \"ref\": cljs.core.get.cljs$core$IFn$_invoke$arity$3(props,new cljs.core.Keyword(null,\"ref\",\"ref\",1289896967),undefined)}),cljs.core.rest(args));\n} else {\nreturn cljs.core.apply.cljs$core$IFn$_invoke$arity$4(module$node_modules$react$index.createElement,type,({}),args);\n}\n};\nvar helix$core$cljs_factory_$_factory = function (var_args){\nvar args = null;\nif (arguments.length > 0) {\nvar G__21884__i = 0, G__21884__a = new Array(arguments.length -  0);\nwhile (G__21884__i < G__21884__a.length) {G__21884__a[G__21884__i] = arguments[G__21884__i + 0]; ++G__21884__i;}\n  args = new cljs.core.IndexedSeq(G__21884__a,0,null);\n} \nreturn helix$core$cljs_factory_$_factory__delegate.call(this,args);};\nhelix$core$cljs_factory_$_factory.cljs$lang$maxFixedArity = 0;\nhelix$core$cljs_factory_$_factory.cljs$lang$applyTo = (function (arglist__21885){\nvar args = cljs.core.seq(arglist__21885);\nreturn helix$core$cljs_factory_$_factory__delegate(args);\n});\nhelix$core$cljs_factory_$_factory.cljs$core$IFn$_invoke$arity$variadic = helix$core$cljs_factory_$_factory__delegate;\nreturn helix$core$cljs_factory_$_factory;\n})()\n;\n(x21787.helix$core$IExtractType$ = cljs.core.PROTOCOL_SENTINEL);\n\n(x21787.helix$core$IExtractType$_type$arity$1 = (function (_){\nvar ___$1 = this;\nreturn type;\n}));\n\nreturn x21787;\n});\nhelix.core.assoc_some = (function helix$core$assoc_some(m,k,x){\nif((!((x == null)))){\nreturn cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(m,k,x);\n} else {\nreturn m;\n}\n});\n/**\n * A helper function for turning a props object into a CLJS map. Works with both\n *   factory functions (which stores a map in a single key, \"helix/props\") and\n *   normal JS objects.\n *   Mostly used internally by helix, but can be useful when writing HOC.\n */\nhelix.core.extract_cljs_props = (function helix$core$extract_cljs_props(o){\nif(((goog.DEBUG) && (((cljs.core.map_QMARK_(o)) || ((o == null)))))){\nthrow cljs.core.ex_info.cljs$core$IFn$_invoke$arity$2(\"Props received were a map. This probably means you're calling your component as a function.\",new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,\"props\",\"props\",453281727),o], null));\n} else {\n}\n\nvar temp__5802__auto__ = helix.core.goog$module$goog$object.get(o,\"helix/props\");\nif(cljs.core.truth_(temp__5802__auto__)){\nvar props = temp__5802__auto__;\nreturn helix.core.assoc_some(props,new cljs.core.Keyword(null,\"children\",\"children\",-940561982),helix.core.goog$module$goog$object.get(o,\"children\"));\n} else {\nreturn cljs_bean.core.bean.cljs$core$IFn$_invoke$arity$1(o);\n}\n});\nhelix.core.props_kvs_identical_QMARK_ = (function helix$core$props_kvs_identical_QMARK_(prev,cur){\nvar prev_props = helix.core.extract_cljs_props(prev);\nvar cur_props = helix.core.extract_cljs_props(cur);\nreturn ((cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(cljs.core.count(prev_props),cljs.core.count(cur_props))) && (cljs.core.every_QMARK_((function (p1__21798_SHARP_){\nreturn (cljs.core.get.cljs$core$IFn$_invoke$arity$2(prev_props,p1__21798_SHARP_) === cljs.core.get.cljs$core$IFn$_invoke$arity$2(cur_props,p1__21798_SHARP_));\n}),cljs.core.keys(cur_props))));\n});\n/**\n * Like React.memo, but passes props to `compare` as CLJS map-likes instead of\n *   JS objects.\n *   `compare` should return true if props are equal, and false if not.\n */\nhelix.core.memo = (function helix$core$memo(var_args){\nvar G__21800 = arguments.length;\nswitch (G__21800) {\ncase 1:\nreturn helix.core.memo.cljs$core$IFn$_invoke$arity$1((arguments[(0)]));\n\nbreak;\ncase 2:\nreturn helix.core.memo.cljs$core$IFn$_invoke$arity$2((arguments[(0)]),(arguments[(1)]));\n\nbreak;\ndefault:\nthrow (new Error([\"Invalid arity: \",cljs.core.str.cljs$core$IFn$_invoke$arity$1(arguments.length)].join('')));\n\n}\n});\n\n(helix.core.memo.cljs$core$IFn$_invoke$arity$1 = (function (component){\nreturn module$node_modules$react$index.memo(component,helix.core.props_kvs_identical_QMARK_);\n}));\n\n(helix.core.memo.cljs$core$IFn$_invoke$arity$2 = (function (component,compare){\nreturn module$node_modules$react$index.memo(component,(function helix$core$memo_compare(o,o_SINGLEQUOTE_){\nvar G__21801 = helix.core.extract_cljs_props(o);\nvar G__21802 = helix.core.extract_cljs_props(o_SINGLEQUOTE_);\nreturn (compare.cljs$core$IFn$_invoke$arity$2 ? compare.cljs$core$IFn$_invoke$arity$2(G__21801,G__21802) : compare.call(null,G__21801,G__21802));\n}));\n}));\n\n(helix.core.memo.cljs$lang$maxFixedArity = 2);\n\n/**\n * Helper function for creating a class component. See `defcomponent`.\n */\nhelix.core.create_component = (function helix$core$create_component(spec,statics){\nvar render = spec.render;\nvar render_SINGLEQUOTE_ = (function (this$){\nvar G__21806 = this$;\nvar G__21807 = helix.core.extract_cljs_props(this$.props);\nvar G__21808 = this$.state;\nreturn (render.cljs$core$IFn$_invoke$arity$3 ? render.cljs$core$IFn$_invoke$arity$3(G__21806,G__21807,G__21808) : render.call(null,G__21806,G__21807,G__21808));\n});\nhelix.core.goog$module$goog$object.set(spec,\"render\",render_SINGLEQUOTE_);\n\nreturn helix.impl.classes.createComponent(module$node_modules$react$index.Component,spec,statics);\n});\n/**\n * Like react/createRef, but the ref can be swapped, reset, and dereferenced\n *   like an atom.\n * \n *   Note: `helix.core/create-ref` is mostly used for class components. Function\n *   components typically rely on `helix.hooks/use-ref` instead.\n */\nhelix.core.create_ref = (function helix$core$create_ref(var_args){\nvar G__21823 = arguments.length;\nswitch (G__21823) {\ncase 0:\nreturn helix.core.create_ref.cljs$core$IFn$_invoke$arity$0();\n\nbreak;\ncase 1:\nreturn helix.core.create_ref.cljs$core$IFn$_invoke$arity$1((arguments[(0)]));\n\nbreak;\ndefault:\nthrow (new Error([\"Invalid arity: \",cljs.core.str.cljs$core$IFn$_invoke$arity$1(arguments.length)].join('')));\n\n}\n});\n\n(helix.core.create_ref.cljs$core$IFn$_invoke$arity$0 = (function (){\nreturn helix.core.create_ref.cljs$core$IFn$_invoke$arity$1(null);\n}));\n\n(helix.core.create_ref.cljs$core$IFn$_invoke$arity$1 = (function (initial_value){\nvar ref = module$node_modules$react$index.createRef();\n(ref.current = (function (){var x21830 = ({\"current\": initial_value});\n(x21830.cljs$core$IDeref$ = cljs.core.PROTOCOL_SENTINEL);\n\n(x21830.cljs$core$IDeref$_deref$arity$1 = (function (this$){\nvar this$__$1 = this;\nreturn this$__$1.current;\n}));\n\n(x21830.cljs$core$IReset$ = cljs.core.PROTOCOL_SENTINEL);\n\n(x21830.cljs$core$IReset$_reset_BANG_$arity$2 = (function (this$,x){\nvar this$__$1 = this;\nreturn (this$__$1.current = x);\n}));\n\n(x21830.cljs$core$ISwap$ = cljs.core.PROTOCOL_SENTINEL);\n\n(x21830.cljs$core$ISwap$_swap_BANG_$arity$2 = (function (this$,f){\nvar this$__$1 = this;\nreturn (this$__$1.current = (function (){var G__21834 = this$__$1.current;\nreturn (f.cljs$core$IFn$_invoke$arity$1 ? f.cljs$core$IFn$_invoke$arity$1(G__21834) : f.call(null,G__21834));\n})());\n}));\n\n(x21830.cljs$core$ISwap$_swap_BANG_$arity$3 = (function (this$,f,a){\nvar this$__$1 = this;\nreturn (this$__$1.current = (function (){var G__21836 = this$__$1.current;\nvar G__21837 = a;\nreturn (f.cljs$core$IFn$_invoke$arity$2 ? f.cljs$core$IFn$_invoke$arity$2(G__21836,G__21837) : f.call(null,G__21836,G__21837));\n})());\n}));\n\n(x21830.cljs$core$ISwap$_swap_BANG_$arity$4 = (function (this$,f,a,b){\nvar this$__$1 = this;\nreturn (this$__$1.current = (function (){var G__21844 = this$__$1.current;\nvar G__21845 = a;\nvar G__21846 = b;\nreturn (f.cljs$core$IFn$_invoke$arity$3 ? f.cljs$core$IFn$_invoke$arity$3(G__21844,G__21845,G__21846) : f.call(null,G__21844,G__21845,G__21846));\n})());\n}));\n\n(x21830.cljs$core$ISwap$_swap_BANG_$arity$5 = (function (this$,f,a,b,xs){\nvar this$__$1 = this;\nreturn (this$__$1.current = cljs.core.apply.cljs$core$IFn$_invoke$arity$5(f,this$__$1.current,a,b,xs));\n}));\n\nreturn x21830;\n})());\n\nreturn ref.current;\n}));\n\n(helix.core.create_ref.cljs$lang$maxFixedArity = 1);\n\n/**\n * Registers a component with the React Fresh runtime.\n *   `type` is the component function, and `id` is the unique ID assigned to it\n *   (e.g. component name) for cache invalidation.\n */\nhelix.core.register_BANG_ = (function helix$core$register_BANG_(type,id){\nif((typeof window !== 'undefined') && (typeof window.$$Register$$ !== 'undefined')){\nreturn window.$$Register$$(type,id);\n} else {\nreturn null;\n}\n});\nhelix.core.signature_BANG_ = (function helix$core$signature_BANG_(){\nvar and__5043__auto__ = (typeof window !== 'undefined') && (typeof window.$$Register$$ !== 'undefined');\nif(and__5043__auto__){\nreturn window.$$Signature$$();\n} else {\nreturn and__5043__auto__;\n}\n});\n","~:ns-info",["^ ","~:rename-macros",null,"~:renames",["^ "],"~:meta",["^ ","~:file","helix/core.cljs","~:line",1,"~:column",5,"~:end-line",1,"~:end-column",15],"~:ns-aliases",["^ ","~$cljs.loader","~$shadow.loader","~$clojure.pprint","~$cljs.pprint","~$clojure.spec.alpha","~$cljs.spec.alpha","~$clojure.core","~$cljs.core"],"~:use-macros",null,"~:excludes",["~#set",["~$type"]],"~:macros",["^ ","~$provider",["^ ","~:arglists",["~#list",[[["^ ","~:keys",["~$context","~$value"],"~:as","~$props"],"~$&","~$children"]]],"~:doc","Creates a Provider for a React Context value.\n\n  Example:\n\n    (def my-context (react/createContext))\n\n    (provider {:context my-context :value my-value} child1 child2 ...childN)","^7",84,"^8",1,"^6","helix/core.clj","~:name","~$helix.core/provider","~:ns","~$helix.core","~:macro",true],"~$defnc",["^ ","^U","^V","^S","~$helix.core/defnc","^6","helix/core.clj","^8",1,"^7",190,"^W",true,"~:style/indent","~:defn","^J",["^K",[["~$display-name","~$&","~$form-body"]]],"^R","Defines a new functional React component. Used like:\n\n  ```\n  (defnc component-name\n    \"Optional docstring\"\n    {,,,fn-meta}\n    [props ?ref]\n    {,,,opts-map}\n    ,,,body)\n  ```\n\n  `component-name` will now be bound in the namespace a React function component\n  that returns a React Element.\n\n\n  Your component should adhere to the following:\n\n  First parameter is 'props', a map of properties passed to the component.\n\n  Second parameter is optional and is used with `React.forwardRef`.\n\n  `fn-meta` is optional and will be merged into the metadata of the `component-name`\n  symbol. A special `:wrap` key may contain an ordered sequence of higher-order\n  components to wrap the component in.\n\n  `opts-map` is optional and can be used to pass some configuration options to the\n  macro. Current options:\n   - `:helix/features` - a map of feature flags to enable. See \"Experimental\" docs.\n\n  `body` should return a React Element."],"~$defcomponent",["^ ","^U","^V","^S","~$helix.core/defcomponent","^6","helix/core.clj","^8",1,"^7",379,"^W",true,"^Z",[1,"~:form",[1]],"^J",["^K",[["^10","~$&","~$spec"]]],"^R","Defines a React class component.\n  Like `class display-name extends React.Component { ... }` in JS.\n\n  Methods are defined using (method-name [this ,,,] ,,,) syntax.\n  Properties elide the arguments vector (property-name expr)\n\n  Static properties and methods can be added by annotating the method or\n  property with metadata containing the :static keyword.\n\n  Some assumptions:\n  - To use setState, you must store the state as a JS obj\n  - The render method receives three arguments: this, a CLJS map of props,\n    and the state object.\n  - displayName by default is the symbol passed in, but can be customized\n    by manually adding it as a static property\n\n  Example:\n\n  (defcomponent foo\n   (constructor\n    [this]\n    (set! (.-state this) #js {:counter 0})))"],"~$fnc",["^ ","^U","^V","^S","~$helix.core/fnc","^6","helix/core.clj","^8",1,"^7",134,"^W",true,"^Z","^[","^J",["^K",[["~$&","~$body"]]],"^R","Creates a new anonymous function React component. Used like:\n\n  (fnc ?optional-component-name\n    [props ?forwarded-ref]\n    {,,,opts-map}\n    ,,,body)\n\n  Returns a function that can be used just like a component defined with\n  `defnc`, i.e. accepts a JS object as props and the body receives them as a\n  map, can be used with `$` macro, forwardRef, etc.\n\n  `opts-map` is optional and can be used to pass some configuration options.\n  Current options:\n   - ':wrap' - ordered sequence of higher-order components to wrap the component in\n   - ':helix/features' - a map of feature flags to enable.\n\n  Some feature flags only pertain to named components, i.e. Fast Refresh and\n  factory functions, and thus can not be used with `fnc`."],"~$suspense",["^ ","^J",["^K",[[["^ ","^L",["~$fallback"]],"~$&","^Q"]]],"^R","Creates a React Suspense boundary.","^7",101,"^8",1,"^6","helix/core.clj","^S","~$helix.core/suspense","^U","^V","^W",true],"~$$",["^ ","^U","^V","^S","~$helix.core/$","^6","helix/core.clj","^8",1,"^7",14,"^W",true,"^Z",0,"^J",["^K",[["^G","~$&","~$args"]]],"^R","Create a new React element from a valid React type.\n\n  Will try to statically convert props to a JS object.\n\n  To pass in dynamic props, use the special `&` or `:&` key in the props map\n  to have the map merged in.\n\n  Simple example:\n\n  ($ my-component\n     \"child1\"\n     ($ \"span\"\n        {:style {:color \"green\"}}\n        \"child2\" ))\n\n  Dynamic exmaple:\n\n  (let [dynamic-props {:foo \"bar\"}]\n    ($ my-component\n       {:static \"prop\"\n        & dynamic-props}))\n  "],"~$defhook",["^ ","^U","^V","^S","~$helix.core/defhook","^6","helix/core.clj","^8",1,"^7",316,"^W",true,"^Z","^[","^J",["^K",[["~$sym","~$&","^18"]]],"^R","Defines a new custom hook function.\n  Checks for invalid usage of other hooks in the body, and other helix\n  features."],"~$defnc-",["^ ","^U","^V","^S","~$helix.core/defnc-","^6","helix/core.clj","^8",1,"^7",304,"^W",true,"^Z","^[","^J",["^K",[["^10","~$&","~$rest"]]],"^R","Same as defnc, yielding a non-public def"],"~$<>",["^ ","^J",["^K",[["~$&","^Q"]]],"^R","Creates a new React Fragment Element","^7",78,"^8",1,"^6","helix/core.clj","^S","~$helix.core/<>","^U","^V","^W",true]],"^S","^V","~:reader-aliases",["^ "],"~:js-aliases",["^ ","react","~$module$node_modules$react$index","react/jsx-runtime","~$module$node_modules$react$jsx_runtime"],"~:op","^U","~:imports",null,"~:requires",["^ ","~$impl.props","~$helix.impl.props","^1K","^1K","~$cljs-bean.core","^1Q","~$bean","^1Q","~$react","^1I","^C","^C","^1I","^1I","~$gobj","~$goog.object","~$goog","^1V","^1U","^1U","^1P","^1P","~$helix.impl.classes","^1W","~$helix.class","^1W","~$jsx-runtime","^1K"],"~:seen",["^F",["~:require","~:require-macros"]],"~:uses",null,"^20",["^ ","^V","^V","^C","^C","^1O","^1P","^1P","^1P"],"^14",["^K",["~$ns","^V",["^K",["~:refer-clojure","~:exclude",["^G"]]],["^K",["^1[",["^1U","^O","^1T"],["^1P","^O","^1O"],["^1W","^O","^1X"],["^1Q","^O","^1R"],["react","^O","^1S"],["react/jsx-runtime","^O","^1Y"]]],["^K",["^20",["^V"]]]]],"~:flags",["^ ","^1[",["^F",[]],"^20",["^F",[]]],"~:js-deps",["^ ","^1H",["^ ","^O","^1S"],"^1J",["^ ","^O","^1Y"]],"~:deps",["^1V","^C","^1U","^1P","^1W","^1Q","^1I","^1K"]],"^U","^V","~:resource-id",["~:shadow.build.classpath/resource","helix/core.cljs"],"~:compiled-at",1748825683188,"^1F",["^ ","^1O","^1P","^1K","^1K","^1Q","^1Q","^V","^V","^1R","^1Q","^1S","^1I","^C","^C","^1I","^1I","^1T","^1U","^1V","^1V","^1U","^1U","^1P","^1P","^1W","^1W","^1X","^1W","^1Y","^1K"],"~:resource-name","helix/core.cljs","~:warnings",[],"~:source","(ns helix.core\n  (:refer-clojure :exclude [type])\n  (:require [goog.object :as gobj]\n            [helix.impl.props :as impl.props]\n            [helix.impl.classes :as helix.class]\n            [cljs-bean.core :as bean]\n            [\"react\" :as react]\n            [\"react/jsx-runtime\" :as jsx-runtime])\n  (:require-macros [helix.core]))\n\n\n(when (exists? js/Symbol)\n  (extend-protocol IPrintWithWriter\n    symbol\n    (-pr-writer [sym writer _]\n      (-write writer (str \"\\\"\" (.toString sym) \"\\\"\")))))\n\n\n(def Fragment\n  \"React.Fragment. See `helix.core/<>` for macro version.\"\n  react/Fragment)\n\n\n(def Suspense\n  \"React.Suspense. See `helix.core/suspense` for macro version.\"\n  react/Suspense)\n\n\n(def create-element react/createElement)\n\n\n(def create-context\n  \"React.createContext\"\n  react/createContext)\n\n\n;; this is to enable calling `(.createElement (get-react))` without doing\n;; a dynamic arity dispatch. See https://github.com/Lokeh/helix/issues/20\n(defn ^js/React get-react [] react)\n\n(def jsx  jsx-runtime/jsx)\n(def jsxs jsx-runtime/jsxs)\n\n(defn $\n  \"Create a new React element from a valid React type.\n\n  Example:\n  ```\n  ($ MyComponent\n   \\\"child1\\\"\n   ($ \\\"span\\\"\n     {:style {:color \\\"green\\\"}}\n     \\\"child2\\\" ))\n  ```\"\n  {:style/indent 0}\n  [type & args]\n  (let [?p (first args)\n        ?c (rest args)\n        native? (or (keyword? type)\n                    (string? type)\n                    (:native (meta type)))\n        has-props? ^boolean (or (map? ?p)\n                                (nil? ?p))\n        children* ^seq (if has-props?\n                         ?c\n                         args)\n        children (if (next children*)\n                   (into-array children*)\n                   (first children*))\n        props* (cond-> {}\n                 has-props?       (conj ?p)\n                 (some? children) (assoc :children children))\n        props (if native?\n                (impl.props/-dom-props props*)\n                (impl.props/-props     props*))\n        key (:key props*)\n        emit-fn (if (next children*)\n                  jsxs\n                  jsx)\n        type' (if (keyword? type)\n                (name type)\n                type)]\n    (if (some? key)\n      (emit-fn type' props key)\n      (emit-fn type' props))))\n\n\n(def ^:deprecated $$\n  \"Dynamically create a new React element from a valid React type.\n\n  `$` can typically be faster, because it will statically process the arguments\n  at macro-time if possible.\n\n  Example:\n  ```\n  ($$ MyComponent\n   \\\"child1\\\"\n   ($$ \\\"span\\\"\n     {:style {:color \\\"green\\\"}}\n     \\\"child2\\\" ))\n  ```\"\n $)\n\n\n(defprotocol IExtractType\n  (-type [factory] \"Extracts the underlying type from the factory function.\"))\n\n\n(defn type\n  \"Geven a factory function created by `helix.core/factory` or `cljs-factory`,\n  returns the original component that the factory creates elements of.\"\n  [f]\n  (-type f))\n\n\n(defn factory\n  \"Creates a factory function for a React component, that when called returns an\n  element with the props and children passed to the factory.\n\n  Use `helix.core/type` to extract the original React component.\"\n  [type]\n  (-> (fn factory [& args]\n        (apply $ type args))\n      (specify! IExtractType\n        (-type [_] type))))\n\n\n(defn cljs-factory\n  \"Creates a factory function for a component defined via `defnc`, that when\n  called returns an element with the props and children passed to the factory.\n  Slightly more performant than `factory` when used with a helix component.\n\n  Use `helix.core/type` to extract the original component this was called with.\"\n  [type]\n  (-> (fn factory [& args]\n        (if (map? (first args))\n          (let [props (first args)]\n            (apply react/createElement\n                   type\n                   #js {\"helix/props\"\n                        (dissoc props\n                                :key\n                                :ref)\n                        \"key\" (get props :key js/undefined)\n                        \"ref\" (get props :ref js/undefined)}\n                   (rest args)))\n          (apply react/createElement\n                 type\n                 #js {}\n                 args)))\n      (specify! IExtractType\n        (-type [_] type))))\n\n\n(defn- assoc-some [m k x]\n  (if (some? x)\n    (assoc m k x)\n    m))\n\n\n(defn extract-cljs-props\n  \"A helper function for turning a props object into a CLJS map. Works with both\n  factory functions (which stores a map in a single key, \\\"helix/props\\\") and\n  normal JS objects.\n  Mostly used internally by helix, but can be useful when writing HOC.\"\n  [o]\n  (when (and ^boolean goog/DEBUG (or (map? o) (nil? o)))\n    (throw (ex-info \"Props received were a map. This probably means you're calling your component as a function.\" {:props o})))\n  (if-let [props (gobj/get o \"helix/props\")]\n    (assoc-some props :children (gobj/get o \"children\"))\n    (bean/bean o)))\n\n\n(defn- props-kvs-identical?\n  [prev cur]\n  (let [prev-props (extract-cljs-props prev)\n        cur-props (extract-cljs-props cur)]\n    (and (= (count prev-props) (count cur-props))\n         (every?\n          #(identical? (get prev-props %) (get cur-props %))\n          (keys cur-props)))))\n\n\n(defn memo\n  \"Like React.memo, but passes props to `compare` as CLJS map-likes instead of\n  JS objects.\n  `compare` should return true if props are equal, and false if not.\"\n  ([component] (react/memo component props-kvs-identical?))\n  ([component compare]\n   (react/memo\n    component\n    (fn memo-compare\n      [o o']\n      (compare\n       (extract-cljs-props o)\n       (extract-cljs-props o'))))))\n\n\n\n;;\n;; -- class components\n;;\n\n\n\n(defn create-component\n  \"Helper function for creating a class component. See `defcomponent`.\"\n  [spec statics]\n  (let [render (.-render ^js spec)\n        render' (fn [this]\n                  (render\n                   this\n                   (extract-cljs-props (.-props ^js this))\n                   (.-state ^js this)))]\n    (gobj/set spec \"render\" render')\n    (helix.class/createComponent react/Component spec statics)))\n\n(comment\n  (def MyComponent\n    (create-component #js {:displayName \"Foo\"\n                           :constructor\n                           (fn [this]\n                             (set! (.-state this) #js {:count 3}))\n                           :render\n                           (fn [this props state]\n                             (prn props state)\n                             ($$ \"div\" (.-count (.-state this))))}\n                      nil))\n\n  (js/console.log MyComponent)\n\n  (rds/renderToString ($$ MyComponent {:foo \"baz\"})))\n\n(defn create-ref\n  \"Like react/createRef, but the ref can be swapped, reset, and dereferenced\n  like an atom.\n\n  Note: `helix.core/create-ref` is mostly used for class components. Function\n  components typically rely on `helix.hooks/use-ref` instead.\"\n\n  ([]\n   (create-ref nil))\n\n  ([initial-value]\n   (let [^js ref (react/createRef)]\n     (set! (.-current ref)\n           (specify! #js {:current initial-value}\n             IDeref\n             (-deref [^js this]\n               (.-current this))\n\n             IReset\n             (-reset! [^js this x]\n               (set! (.-current this) x))\n\n             ISwap\n             (-swap!\n               ([^js this f]\n                (set! (.-current this) (f (.-current this))))\n               ([^js this f a]\n                (set! (.-current this) (f (.-current this) a)))\n               ([^js this f a b]\n                (set! (.-current this) (f (.-current this) a b)))\n               ([^js this f a b xs]\n                (set! (.-current this) (apply f (.-current this) a b xs))))))\n     (.-current ref))))\n\n;;\n;; -- React Fast Refresh\n;;\n\n\n(defn register!\n  \"Registers a component with the React Fresh runtime.\n  `type` is the component function, and `id` is the unique ID assigned to it\n  (e.g. component name) for cache invalidation.\"\n  [type id]\n  (when (exists? js/window.$$Register$$)\n    (js/window.$$Register$$ type id)))\n\n\n(defn signature! []\n  ;; grrr `maybe` bug strikes again\n  (and (exists? js/window.$$Register$$)\n       (js/window.$$Signature$$)))\n","~:reader-features",["^F",["~:cljs"]],"~:cljc",false,"~:source-map-compact",["^ ","mappings","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","names",["js/Symbol","cljs.core/PROTOCOL_SENTINEL","cljs.core/symbol","sym","writer","_","cljs.core/-write","helix.core/Fragment","js/module$node_modules$react$index.Fragment","helix.core/Suspense","js/module$node_modules$react$index.Suspense","helix.core/create-element","js/module$node_modules$react$index.createElement","helix.core/create-context","js/module$node_modules$react$index.createContext","helix.core/get-react","js/module$node_modules$react$index","helix.core/jsx","js/module$node_modules$react$jsx_runtime.jsx","helix.core/jsxs","js/module$node_modules$react$jsx_runtime.jsxs","var_args","args__5775__auto__","len__5769__auto__","i__5770__auto__","argseq__5776__auto__","cljs.core/IndexedSeq","helix.core/$","seq21734","G__21735","cljs.core/first","cljs.core/next","self__5754__auto__","type","args","?p","?c","cljs.core/rest","native?","or__5045__auto__","cljs.core/Keyword","cljs.core/meta","has-props?","cljs.core/map?","children*","children","cljs.core.into_array","props*","G__21744","cljs.core.conj","cljs.core.assoc","props","helix.impl.props._dom_props","helix.impl.props._props","key","emit-fn","type'","cljs.core/name","helix.core/$$","helix$core$IExtractType$_type$dyn","x__5393__auto__","m__5394__auto__","helix.core/-type","goog/typeOf","m__5392__auto__","cljs.core/missing-protocol","helix.core/IExtractType","factory","helix.core/type","f","helix.core/factory","cljs.core.apply","x21785","helix.core/cljs-factory","cljs.core.dissoc","cljs.core.get","js/undefined","x21787","helix.core/assoc-some","m","k","x","helix.core/extract-cljs-props","o","goog/DEBUG","cljs.core.ex_info","temp__5802__auto__","helix.core.goog$module$goog$object.get","cljs_bean.core.bean","helix.core/props-kvs-identical?","prev","cur","prev-props","cur-props","cljs.core._EQ_","cljs.core/count","p1__21798#","cljs.core/every?","cljs.core/keys","G__21800","helix.core/memo","js/Error","component","js/module$node_modules$react$index.memo","compare","o'","G__21801","G__21802","helix.core/create-component","spec","statics","render","render'","this","G__21806","G__21807","G__21808","helix.core.goog$module$goog$object.set","helix.impl.classes/createComponent","js/module$node_modules$react$index.Component","G__21823","helix.core/create-ref","helix.core.create_ref","initial-value","ref","js/module$node_modules$react$index.createRef","x21830","G__21834","a","G__21836","G__21837","b","G__21844","G__21845","G__21846","xs","helix.core/register!","id","js/window","js/window.$$Register$$","helix.core/signature!","and__5043__auto__","js/window.$$Signature$$"]],"~:used-vars",["^F",["~$helix.core/signature!","~$cljs.core/PROTOCOL_SENTINEL","~$cljs.core/rest","~$helix.core/Suspense","~$helix.core.goog$module$goog$object.set","~$helix.core/type","~$js/undefined","~$js/module$node_modules$react$index","~$cljs.core/=","~$cljs.core/keys","~$cljs.core/into-array","~$cljs.core/-write","~$cljs.core/IndexedSeq","~$js/window.$$Register$$","~$cljs.core/count","~$goog/typeOf","^1<","~$cljs.core/apply","~$cljs.core/Keyword","~$helix.impl.props/-dom-props","~$helix.core/assoc-some","~$js/module$node_modules$react$jsx_runtime.jsx","~$cljs.core/dissoc","~$cljs-bean.core/bean","~$helix.core/factory","~$js/module$node_modules$react$index.createElement","~$js/Symbol","~$cljs.core/map?","~$cljs.core/conj","~$helix.core/create-element","~$js/module$node_modules$react$index.Suspense","~$helix.core/register!","~$helix.core.goog$module$goog$object.get","~$js/window.$$Signature$$","~$helix.core/$$","~$cljs.core/get","~$js/module$node_modules$react$index.Fragment","~$helix.core/create-context","~$js/module$node_modules$react$index.memo","~$goog/DEBUG","~$helix.core/jsxs","~$cljs.core/symbol","~$cljs.core/missing-protocol","~$cljs.core/ex-info","~$cljs.core/meta","~$helix.core/props-kvs-identical?","~$helix.core/jsx","~$cljs.core/next","~$helix.impl.props/-props","~$helix.core/create-ref","~$cljs.core/not","~$helix.core/get-react","~$helix.impl.classes/createComponent","~$cljs.core/assoc","~$helix.core/extract-cljs-props","~$js/module$node_modules$react$jsx_runtime.jsxs","~$helix.core/Fragment","~$helix.core/cljs-factory","~$helix.core/IExtractType","~$helix.core/memo","~$helix.core/-type","~$js/module$node_modules$react$index.createContext","~$cljs.core/first","~$js/window","~$js/module$node_modules$react$index.Component","~$helix.core/create-component","~$cljs.core/name","~$cljs.core/every?","~$js/Error","~$js/module$node_modules$react$index.createRef"]]],"~:cache-keys",["~#cmap",[["^29","goog/dom/tagname.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","~:shadow.build.compiler/resolve",["^ ","~:require-id",null,"~:deps-ids",["^F",[]],"~:deps-syms",["^1V","~$goog.dom.HtmlElement"]]],["^29","helix/impl/classes.js"],["24c1f6bacf73d72bab4bc740e9cde5f3e78041a3","^44",["^ ","^45",null,"^46",["^F",[]],"^47",["^1V"]]],["^29","goog/html/trustedtypes.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^44",["^ ","^45",null,"^46",["^F",[]],"^47",["^1V"]]],["^29","goog/labs/useragent/browser.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^44",["^ ","^45",null,"^46",["^F",[]],"^47",["^1V","~$goog.array","^1U","~$goog.labs.userAgent.util","~$goog.string.internal"]]],["^29","goog/html/safeurl.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^44",["^ ","^45",null,"^46",["^F",[]],"^47",["^1V","~$goog.asserts","~$goog.fs.url","~$goog.html.TrustedResourceUrl","~$goog.i18n.bidi.Dir","~$goog.i18n.bidi.DirectionalString","~$goog.string.Const","~$goog.string.TypedString","^4;"]]],["^29","goog/array/array.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^44",["^ ","^45",null,"^46",["^F",[]],"^47",["^1V","^4<"]]],["^29","goog/debug/error.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^44",["^ ","^45",null,"^46",["^F",[]],"^47",["^1V"]]],["^29","goog/dom/nodetype.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^44",["^ ","^45",null,"^46",["^F",[]],"^47",["^1V"]]],["^29","goog/string/typedstring.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^44",["^ ","^45",null,"^46",["^F",[]],"^47",["^1V"]]],["~:shadow.build.npm/resource","node_modules/react/index.js"],["df066d241a6c88d9f251ad255f77248626520d44","c6e952608e11e2e0d96f5ae58231258044043e43","a69a7f3d4a4636bf9035bc53c05b2d99a7b8af7f","^44",["^ ","^45",null,"^46",["^F",[]],"^47",["~$shadow.js","~$module$node_modules$react$cjs$react_production_min","~$module$node_modules$react$cjs$react_development"]]],["^29","shadow/js.js"],["f954e34640e06ba6b965fcc8742084e5b441332d","^44",["^ ","^45",null,"^46",["^F",[]],"^47",["^1V"]]],["^29","goog/object/object.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^44",["^ ","^45",null,"^46",["^F",[]],"^47",["^1V"]]],["^29","goog/dom/asserts.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^44",["^ ","^45",null,"^46",["^F",[]],"^47",["^1V","^4<"]]],"~:SHADOW-TIMESTAMP",[1748825659000,1748825659000,1748819812000],["^4C","node_modules/react/cjs/react.development.js"],["df066d241a6c88d9f251ad255f77248626520d44","c6e952608e11e2e0d96f5ae58231258044043e43","2ab8d4d07350f7f4fecf33dc915a2c850a5eea16","^44",["^ ","^45",null,"^46",["^F",[]],"^47",["^4D"]]],["^29","goog/math/long.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^44",["^ ","^45",null,"^46",["^F",[]],"^47",["^1V","^4<","~$goog.reflect"]]],["^29","goog/html/trustedresourceurl.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^44",["^ ","^45",null,"^46",["^F",[]],"^47",["^1V","^4<","~$goog.fs.blob","^4=","~$goog.html.SafeScript","~$goog.html.trustedtypes","^4?","^4@","^4A","^4B"]]],["^4C","node_modules/react/cjs/react-jsx-runtime.development.js"],["df066d241a6c88d9f251ad255f77248626520d44","c6e952608e11e2e0d96f5ae58231258044043e43","7b199e5577f2e1b4e6fb134673b2027c20b4e58b","^44",["^ ","^45",null,"^46",["^F",[]],"^47",["^4D","^1I"]]],["^29","goog/string/internal.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^44",["^ ","^45",null,"^46",["^F",[]],"^47",["^1V"]]],["^29","cljs_bean/core.cljs"],["48253381fc2e9a7be115de76154157bad516ea85","^44",["^ ","^45",null,"^46",["^F",[]],"^47",["^1V","^C","~$cljs-bean.from.cljs.core","^1U"]]],["^29","goog/functions/functions.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^44",["^ ","^45",null,"^46",["^F",[]],"^47",["^1V"]]],["^29","goog/html/safestyle.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^44",["^ ","^45",null,"^46",["^F",[]],"^47",["^1V","^4A","~$goog.html.SafeUrl","^4B","^4<","^4;"]]],["^29","goog/dom/safe.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^44",["^ ","^45",null,"^46",["^F",[]],"^47",["^1V","^4<","~$goog.dom.asserts","~$goog.functions","~$goog.html.SafeHtml","^4J","~$goog.html.SafeStyle","^4M","^4>","~$goog.html.uncheckedconversions","^4A","^4;"]]],["^29","goog/html/safehtml.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^44",["^ ","^45",null,"^46",["^F",[]],"^47",["^1V","^4A","^4?","^4@","^4J","^4Q","~$goog.html.SafeStyleSheet","^4M","~$goog.dom.TagName","^4>","^4B","^4<","~$goog.labs.userAgent.browser","^49","^1U","^4;","~$goog.dom.tags","^4K"]]],["^29","goog/dom/tags.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^44",["^ ","^45",null,"^46",["^F",[]],"^47",["^1V","^1U"]]],["^29","helix/impl/props.cljc"],["24c1f6bacf73d72bab4bc740e9cde5f3e78041a3","^44",["^ ","^45",null,"^46",["^F",[]],"^47",["^1V","^C","~$clojure.string","^1Q","^1U"]]],["^29","goog/fs/blob.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^44",["^ ","^45",null,"^46",["^F",[]],"^47",["^1V"]]],["^29","goog/asserts/asserts.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^44",["^ ","^45",null,"^46",["^F",[]],"^47",["^1V","~$goog.debug.Error","~$goog.dom.NodeType"]]],["^29","goog/uri/uri.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^44",["^ ","^45",null,"^46",["^F",[]],"^47",["^1V","^49","^4<","~$goog.collections.maps","~$goog.string","~$goog.structs","~$goog.uri.utils","~$goog.uri.utils.ComponentIndex","~$goog.uri.utils.StandardQueryParam"]]],["^29","goog/collections/maps.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^44",["^ ","^45",null,"^46",["^F",[]],"^47",["^1V"]]],["^4C","node_modules/react/cjs/react-jsx-runtime.production.min.js"],["df066d241a6c88d9f251ad255f77248626520d44","c6e952608e11e2e0d96f5ae58231258044043e43","ed2520ac13317ed539301a6e41df9ac7f9593616","^44",["^ ","^45",null,"^46",["^F",[]],"^47",["^4D","^1I"]]],["^29","goog/i18n/bidi.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^44",["^ ","^45",null,"^46",["^F",[]],"^47",["^1V"]]],["^29","goog/fs/url.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^44",["^ ","^45",null,"^46",["^F",[]],"^47",["^1V"]]],["^29","goog/base.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^44",["^ ","^45",null,"^46",["^F",[]],"^47",[]]],["^29","goog/structs/structs.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^44",["^ ","^45",null,"^46",["^F",[]],"^47",["^1V","^49","^1U"]]],["^29","clojure/string.cljs"],["bc14df6666853ed869d7b88aaa864111c65d0c7f","^44",["^ ","^45",null,"^46",["^F",[]],"^47",["^1V","^C","^4[","~$goog.string.StringBuffer"]]],["^4C","node_modules/react/cjs/react.production.min.js"],["df066d241a6c88d9f251ad255f77248626520d44","c6e952608e11e2e0d96f5ae58231258044043e43","a31c0a9ff8b9566dce48df77abc4a00c5290c182","^44",["^ ","^45",null,"^46",["^F",[]],"^47",["^4D"]]],["^29","helix/core.cljs"],["24c1f6bacf73d72bab4bc740e9cde5f3e78041a3","^44",["^ ","^45",null,"^46",["^F",[]],"^47",["^1V","^C","^1U","^1P","^1W","^1Q","^1I","^1K"]]],["^29","goog/string/string.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^44",["^ ","^45",null,"^46",["^F",[]],"^47",["^1V","~$goog.dom.safe","^4R","^4A","^4;"]]],["^29","goog/reflect/reflect.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^44",["^ ","^45",null,"^46",["^F",[]],"^47",["^1V"]]],["^29","goog/labs/useragent/util.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^44",["^ ","^45",null,"^46",["^F",[]],"^47",["^1V","~$goog.labs.userAgent","^4;"]]],["^29","goog/string/stringbuffer.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^44",["^ ","^45",null,"^46",["^F",[]],"^47",["^1V"]]],["^29","goog/labs/useragent/useragent.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^44",["^ ","^45",null,"^46",["^F",[]],"^47",["^1V"]]],["^29","goog/html/uncheckedconversions.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^44",["^ ","^45",null,"^46",["^F",[]],"^47",["^1V","^4<","^4P","^4J","^4Q","^4S","^4M","^4>","^4A","^4;","^4?"]]],["^29","cljs_bean/from/cljs/core.cljs"],["48253381fc2e9a7be115de76154157bad516ea85","^44",["^ ","^45",null,"^46",["^F",[]],"^47",["^1V","^C"]]],["^29","goog/dom/htmlelement.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^44",["^ ","^45",null,"^46",["^F",[]],"^47",["^1V"]]],["^29","cljs/core.cljs"],["bc14df6666853ed869d7b88aaa864111c65d0c7f","^44",["^ ","^45",null,"^46",["^F",[]],"^47",["^1V","~$goog.math.Long","~$goog.math.Integer","^4[","^1U","^49","~$goog.Uri","^54"]]],["^29","goog/html/safescript.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^44",["^ ","^45",null,"^46",["^F",[]],"^47",["^1V","^4A","^4B","^4K","^4<"]]],["^29","goog/html/safestylesheet.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^44",["^ ","^45",null,"^46",["^F",[]],"^47",["^1V","^4A","^4Q","^4B","^1U","^4<","^4;"]]],["^29","goog/math/integer.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^44",["^ ","^45",null,"^46",["^F",[]],"^47",["^1V","^4H"]]],["^29","goog/uri/utils.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^44",["^ ","^45",null,"^46",["^F",[]],"^47",["^1V","^4<","^4["]]],["^29","goog/string/const.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^44",["^ ","^45",null,"^46",["^F",[]],"^47",["^1V","^4<","^4B"]]],["^4C","node_modules/react/jsx-runtime.js"],["df066d241a6c88d9f251ad255f77248626520d44","c6e952608e11e2e0d96f5ae58231258044043e43","e0b2f53601de8bd550caf5a3e7cba1c5122ce137","^44",["^ ","^45",null,"^46",["^F",[]],"^47",["^4D","~$module$node_modules$react$cjs$react_jsx_runtime_production_min","~$module$node_modules$react$cjs$react_jsx_runtime_development"]]]]],"~:clj-info",["^ ","jar:file:/home/xuelin/.m2/repository/org/clojure/clojurescript/1.11.60/clojurescript-1.11.60.jar!/cljs/vendor/clojure/tools/reader/reader_types.clj",1748819812000,"jar:file:/home/xuelin/.m2/repository/org/clojure/clojure/1.11.1/clojure-1.11.1.jar!/clojure/java/io.clj",1736537829000,"jar:file:/home/xuelin/.m2/repository/org/clojure/clojurescript/1.11.60/clojurescript-1.11.60.jar!/cljs/tagged_literals.cljc",1748819812000,"jar:file:/home/xuelin/.m2/repository/org/clojure/clojurescript/1.11.60/clojurescript-1.11.60.jar!/cljs/analyzer.cljc",1748819812000,"jar:file:/home/xuelin/.m2/repository/org/clojure/clojurescript/1.11.60/clojurescript-1.11.60.jar!/cljs/util.cljc",1748819812000,"jar:file:/home/xuelin/.m2/repository/org/clojure/clojurescript/1.11.60/clojurescript-1.11.60.jar!/cljs/source_map.clj",1748819812000,"jar:file:/home/xuelin/.m2/repository/org/clojure/clojure/1.11.1/clojure-1.11.1.jar!/clojure/string.clj",1736537829000,"jar:file:/home/xuelin/.m2/repository/org/clojure/clojurescript/1.11.60/clojurescript-1.11.60.jar!/cljs/externs.clj",1748819812000,"jar:file:/home/xuelin/.m2/repository/org/clojure/clojurescript/1.11.60/clojurescript-1.11.60.jar!/cljs/analyzer/impl.cljc",1748819812000,"jar:file:/home/xuelin/.m2/repository/org/clojure/clojurescript/1.11.60/clojurescript-1.11.60.jar!/cljs/core.cljc",1748819812000,"jar:file:/home/xuelin/.m2/repository/org/clojure/clojurescript/1.11.60/clojurescript-1.11.60.jar!/cljs/source_map/base64.clj",1748819812000,"jar:file:/home/xuelin/.m2/repository/org/clojure/clojure/1.11.1/clojure-1.11.1.jar!/clojure/pprint.clj",1736537829000,"jar:file:/home/xuelin/.m2/repository/org/clojure/clojure/1.11.1/clojure-1.11.1.jar!/clojure/zip.clj",1736537829000,"jar:file:/home/xuelin/.m2/repository/org/clojure/clojurescript/1.11.60/clojurescript-1.11.60.jar!/cljs/instant.clj",1748819812000,"jar:file:/home/xuelin/.m2/repository/org/clojure/clojurescript/1.11.60/clojurescript-1.11.60.jar!/cljs/vendor/clojure/tools/reader/impl/inspect.clj",1748819812000,"jar:file:/home/xuelin/.m2/repository/org/clojure/clojurescript/1.11.60/clojurescript-1.11.60.jar!/cljs/vendor/clojure/tools/reader/default_data_readers.clj",1748819812000,"jar:file:/home/xuelin/.m2/repository/org/clojure/clojurescript/1.11.60/clojurescript-1.11.60.jar!/cljs/analyzer/passes.cljc",1748819812000,"jar:file:/home/xuelin/.m2/repository/org/clojure/clojurescript/1.11.60/clojurescript-1.11.60.jar!/cljs/vendor/clojure/tools/reader.clj",1748819812000,"jar:file:/home/xuelin/.m2/repository/lilactown/helix/0.2.1/helix-0.2.1.jar!/helix/impl/props.cljc",1748821455000,"jar:file:/home/xuelin/.m2/repository/org/clojure/clojurescript/1.11.60/clojurescript-1.11.60.jar!/cljs/js_deps.cljc",1748819812000,"jar:file:/home/xuelin/.m2/repository/org/clojure/clojure/1.11.1/clojure-1.11.1.jar!/clojure/set.clj",1736537829000,"jar:file:/home/xuelin/.m2/repository/org/clojure/clojurescript/1.11.60/clojurescript-1.11.60.jar!/cljs/vendor/clojure/data/json.clj",1748819812000,"jar:file:/home/xuelin/.m2/repository/lilactown/helix/0.2.1/helix-0.2.1.jar!/helix/core.clj",1748821455000,"jar:file:/home/xuelin/.m2/repository/org/clojure/clojurescript/1.11.60/clojurescript-1.11.60.jar!/cljs/analyzer/api.cljc",1748819812000,"jar:file:/home/xuelin/.m2/repository/org/clojure/clojure/1.11.1/clojure-1.11.1.jar!/clojure/instant.clj",1736537829000,"jar:file:/home/xuelin/.m2/repository/org/clojure/clojurescript/1.11.60/clojurescript-1.11.60.jar!/cljs/source_map/base64_vlq.clj",1748819812000,"jar:file:/home/xuelin/.m2/repository/lilactown/helix/0.2.1/helix-0.2.1.jar!/helix/impl/analyzer.clj",1748821455000,"jar:file:/home/xuelin/.m2/repository/org/clojure/clojurescript/1.11.60/clojurescript-1.11.60.jar!/cljs/vendor/clojure/tools/reader/impl/errors.clj",1748819812000,"jar:file:/home/xuelin/.m2/repository/org/clojure/clojurescript/1.11.60/clojurescript-1.11.60.jar!/cljs/env.cljc",1748819812000,"jar:file:/home/xuelin/.m2/repository/org/clojure/clojurescript/1.11.60/clojurescript-1.11.60.jar!/cljs/compiler.cljc",1748819812000,"jar:file:/home/xuelin/.m2/repository/org/clojure/clojure/1.11.1/clojure-1.11.1.jar!/clojure/core.clj",1736537829000,"jar:file:/home/xuelin/.m2/repository/org/clojure/clojurescript/1.11.60/clojurescript-1.11.60.jar!/cljs/analyzer/passes/and_or.cljc",1748819812000,"jar:file:/home/xuelin/.m2/repository/org/clojure/clojure/1.11.1/clojure-1.11.1.jar!/clojure/edn.clj",1736537829000,"jar:file:/home/xuelin/.m2/repository/org/clojure/clojurescript/1.11.60/clojurescript-1.11.60.jar!/cljs/analyzer/impl/namespaces.cljc",1748819812000],"~:analyzer",["^ ","^3",null,"^4",["^ "],"^5",["^ ","^6","helix/core.cljs","^7",1,"^8",5,"^9",1,"^:",15],"^;",["^ ","^<","^=","^>","^?","^@","^A","^B","^C"],"~:shadow/protocol-prefixes",["^F",["helix$core$IExtractType$"]],"^D",null,"^E",["^F",["^G"]],"^H",["^ ","^I",["^ ","^J",["^K",[[["^ ","^L",["^M","^N"],"^O","^P"],"~$&","^Q"]]],"^R","Creates a Provider for a React Context value.\n\n  Example:\n\n    (def my-context (react/createContext))\n\n    (provider {:context my-context :value my-value} child1 child2 ...childN)","^7",84,"^8",1,"^6","helix/core.clj","^S","^T","^U","^V","^W",true],"^X",["^ ","^U","^V","^S","^Y","^6","helix/core.clj","^8",1,"^7",190,"^W",true,"^Z","^[","^J",["^K",[["^10","~$&","^11"]]],"^R","Defines a new functional React component. Used like:\n\n  ```\n  (defnc component-name\n    \"Optional docstring\"\n    {,,,fn-meta}\n    [props ?ref]\n    {,,,opts-map}\n    ,,,body)\n  ```\n\n  `component-name` will now be bound in the namespace a React function component\n  that returns a React Element.\n\n\n  Your component should adhere to the following:\n\n  First parameter is 'props', a map of properties passed to the component.\n\n  Second parameter is optional and is used with `React.forwardRef`.\n\n  `fn-meta` is optional and will be merged into the metadata of the `component-name`\n  symbol. A special `:wrap` key may contain an ordered sequence of higher-order\n  components to wrap the component in.\n\n  `opts-map` is optional and can be used to pass some configuration options to the\n  macro. Current options:\n   - `:helix/features` - a map of feature flags to enable. See \"Experimental\" docs.\n\n  `body` should return a React Element."],"^12",["^ ","^U","^V","^S","^13","^6","helix/core.clj","^8",1,"^7",379,"^W",true,"^Z",[1,"^14",[1]],"^J",["^K",[["^10","~$&","^15"]]],"^R","Defines a React class component.\n  Like `class display-name extends React.Component { ... }` in JS.\n\n  Methods are defined using (method-name [this ,,,] ,,,) syntax.\n  Properties elide the arguments vector (property-name expr)\n\n  Static properties and methods can be added by annotating the method or\n  property with metadata containing the :static keyword.\n\n  Some assumptions:\n  - To use setState, you must store the state as a JS obj\n  - The render method receives three arguments: this, a CLJS map of props,\n    and the state object.\n  - displayName by default is the symbol passed in, but can be customized\n    by manually adding it as a static property\n\n  Example:\n\n  (defcomponent foo\n   (constructor\n    [this]\n    (set! (.-state this) #js {:counter 0})))"],"^16",["^ ","^U","^V","^S","^17","^6","helix/core.clj","^8",1,"^7",134,"^W",true,"^Z","^[","^J",["^K",[["~$&","^18"]]],"^R","Creates a new anonymous function React component. Used like:\n\n  (fnc ?optional-component-name\n    [props ?forwarded-ref]\n    {,,,opts-map}\n    ,,,body)\n\n  Returns a function that can be used just like a component defined with\n  `defnc`, i.e. accepts a JS object as props and the body receives them as a\n  map, can be used with `$` macro, forwardRef, etc.\n\n  `opts-map` is optional and can be used to pass some configuration options.\n  Current options:\n   - ':wrap' - ordered sequence of higher-order components to wrap the component in\n   - ':helix/features' - a map of feature flags to enable.\n\n  Some feature flags only pertain to named components, i.e. Fast Refresh and\n  factory functions, and thus can not be used with `fnc`."],"^19",["^ ","^J",["^K",[[["^ ","^L",["^1:"]],"~$&","^Q"]]],"^R","Creates a React Suspense boundary.","^7",101,"^8",1,"^6","helix/core.clj","^S","^1;","^U","^V","^W",true],"~$$",["^ ","^U","^V","^S","^1<","^6","helix/core.clj","^8",1,"^7",14,"^W",true,"^Z",0,"^J",["^K",[["^G","~$&","^1="]]],"^R","Create a new React element from a valid React type.\n\n  Will try to statically convert props to a JS object.\n\n  To pass in dynamic props, use the special `&` or `:&` key in the props map\n  to have the map merged in.\n\n  Simple example:\n\n  ($ my-component\n     \"child1\"\n     ($ \"span\"\n        {:style {:color \"green\"}}\n        \"child2\" ))\n\n  Dynamic exmaple:\n\n  (let [dynamic-props {:foo \"bar\"}]\n    ($ my-component\n       {:static \"prop\"\n        & dynamic-props}))\n  "],"^1>",["^ ","^U","^V","^S","^1?","^6","helix/core.clj","^8",1,"^7",316,"^W",true,"^Z","^[","^J",["^K",[["^1@","~$&","^18"]]],"^R","Defines a new custom hook function.\n  Checks for invalid usage of other hooks in the body, and other helix\n  features."],"^1A",["^ ","^U","^V","^S","^1B","^6","helix/core.clj","^8",1,"^7",304,"^W",true,"^Z","^[","^J",["^K",[["^10","~$&","^1C"]]],"^R","Same as defnc, yielding a non-public def"],"^1D",["^ ","^J",["^K",[["~$&","^Q"]]],"^R","Creates a new React Fragment Element","^7",78,"^8",1,"^6","helix/core.clj","^S","^1E","^U","^V","^W",true]],"~:shadow/js-access-properties",["^F",["$$Signature$$","createElement","Fragment","jsx","$$Register$$","createContext","Suspense","Component","createRef","jsxs","memo"]],"^S","^V","^1F",["^ "],"^1G",["^ ","^1H","^1I","^1J","^1K"],"^1M",null,"^1N",["^ ","^1O","^1P","^1K","^1K","^1Q","^1Q","^1R","^1Q","^1S","^1I","^C","^C","^1I","^1I","^1T","^1U","^1V","^1V","^1U","^1U","^1P","^1P","^1W","^1W","^1X","^1W","^1Y","^1K"],"^1Z",["^F",["^1[","^20"]],"~:shadow/js-access-global",["^F",["window","Symbol","undefined","Error"]],"^21",null,"~:defs",["^ ","~$jsx",["^ ","^S","^3F","^6","helix/core.cljs","^7",41,"^8",1,"^9",41,"^:",9,"^5",["^ ","^6","helix/core.cljs","^7",41,"^8",6,"^9",41,"^:",9],"~:tag","~$js"],"~$$$",["^ ","^5",["^ ","^6","helix/core.cljs","^7",88,"^8",19,"^9",88,"^:",21,"~:deprecated",true],"^S","^3:","^6","helix/core.cljs","^:",21,"^8",1,"^7",88,"^6<",true,"^9",88,"^R","Dynamically create a new React element from a valid React type.\n\n  `$` can typically be faster, because it will statically process the arguments\n  at macro-time if possible.\n\n  Example:\n  ```\n  ($$ MyComponent\n   \"child1\"\n   ($$ \"span\"\n     {:style {:color \"green\"}}\n     \"child2\" ))\n  ```"],"~$create-context",["^ ","^5",["^ ","^6","helix/core.cljs","^7",32,"^8",6,"^9",32,"^:",20],"^S","^3=","^6","helix/core.cljs","^:",20,"^8",1,"^7",32,"^9",32,"^69","^6:","^R","React.createContext"],"~$memo",["^ ","~:protocol-inline",null,"^5",["^ ","^6","helix/core.cljs","^7",184,"^8",7,"^9",184,"^:",11,"^J",["^K",["~$quote",["^K",[["~$component"],["^6A","~$compare"]]]]],"^R","Like React.memo, but passes props to `compare` as CLJS map-likes instead of\n  JS objects.\n  `compare` should return true if props are equal, and false if not.","~:top-fn",["^ ","~:variadic?",false,"~:fixed-arity",2,"~:max-fixed-arity",2,"~:method-params",[["^6A"],["^6A","^6B"]],"^J",["^K",[["^6A"],["^6A","^6B"]]],"~:arglists-meta",["^K",[null,null]]]],"^S","^3S","^6","helix/core.cljs","^:",11,"^6C",["^ ","^6D",false,"^6E",2,"^6F",2,"^6G",[["^6A"],["^6A","^6B"]],"^J",["^K",[["^6A"],["^6A","^6B"]]],"^6H",["^K",[null,null]]],"^6G",[["^6A"],["^6A","^6B"]],"~:protocol-impl",null,"^6E",2,"^6H",["^K",[null,null]],"^8",1,"^6D",false,"~:methods",[["^ ","^6E",1,"^6D",false,"^69","^6:"],["^ ","^6E",2,"^6D",false,"^69","^6:"]],"^7",184,"^9",184,"^6F",2,"~:fn-var",true,"^J",["^K",[["^6A"],["^6A","^6B"]]],"^R","Like React.memo, but passes props to `compare` as CLJS map-likes instead of\n  JS objects.\n  `compare` should return true if props are equal, and false if not."],"~$IExtractType",["^ ","^5",["^ ","~:protocol-symbol",true,"^6","helix/core.cljs","^:",26,"^8",14,"^7",105,"~:protocol-info",["^ ","^6J",["^ ","~$-type",[["~$factory"]]]],"^9",105,"~:sigs",["^ ","~:-type",["^ ","^S","^6O","^J",["^K",[["^6P"]]],"^R","Extracts the underlying type from the factory function."]],"~:jsdoc",["^K",["@interface"]]],"^6M",true,"^S","^3R","^6","helix/core.cljs","^:",26,"^8",1,"^7",105,"^6N",["^ ","^6J",["^ ","^6O",[["^6P"]]]],"~:info",null,"^9",105,"^69","~$any","^6Q",["^ ","^6R",["^ ","^S","^6O","^J",["^K",[["^6P"]]],"^R","Extracts the underlying type from the factory function."]],"~:impls",["^F",["~$x21787","~$x21785"]],"^6S",["^K",["@interface"]]],"~$jsxs",["^ ","^S","^3@","^6","helix/core.cljs","^7",42,"^8",1,"^9",42,"^:",10,"^5",["^ ","^6","helix/core.cljs","^7",42,"^8",6,"^9",42,"^:",10],"^69","^6:"],"~$props-kvs-identical?",["^ ","^6?",null,"^5",["^ ","^6","helix/core.cljs","^7",174,"^8",8,"^9",174,"^:",28,"~:private",true,"^J",["^K",["^6@",["^K",[["~$prev","~$cur"]]]]]],"^6[",true,"^S","^3E","^6","helix/core.cljs","^:",28,"^6G",["^K",[["^70","^71"]]],"^6I",null,"^6H",["^K",[null,null]],"^8",1,"^6D",false,"^7",174,"~:ret-tag","~$boolean","^9",174,"^6F",2,"^6K",true,"^J",["^K",["^6@",["^K",[["^70","^71"]]]]]],"~$create-ref",["^ ","^6?",null,"^5",["^ ","^6","helix/core.cljs","^7",234,"^8",7,"^9",234,"^:",17,"^J",["^K",["^6@",["^K",[[],["~$initial-value"]]]]],"^R","Like react/createRef, but the ref can be swapped, reset, and dereferenced\n  like an atom.\n\n  Note: `helix.core/create-ref` is mostly used for class components. Function\n  components typically rely on `helix.hooks/use-ref` instead.","^6C",["^ ","^6D",false,"^6E",1,"^6F",1,"^6G",[[],["^75"]],"^J",["^K",[[],["^75"]]],"^6H",["^K",[null,null]]]],"^S","^3I","^6","helix/core.cljs","^:",17,"^6C",["^ ","^6D",false,"^6E",1,"^6F",1,"^6G",[[],["^75"]],"^J",["^K",[[],["^75"]]],"^6H",["^K",[null,null]]],"^6G",[[],["^75"]],"^6I",null,"^6E",1,"^6H",["^K",[null,null]],"^8",1,"^6D",false,"^6J",[["^ ","^6E",0,"^6D",false,"^69","^6U"],["^ ","^6E",1,"^6D",false,"^69","^6:"]],"^7",234,"^9",234,"^6F",1,"^6K",true,"^J",["^K",[[],["^75"]]],"^R","Like react/createRef, but the ref can be swapped, reset, and dereferenced\n  like an atom.\n\n  Note: `helix.core/create-ref` is mostly used for class components. Function\n  components typically rely on `helix.hooks/use-ref` instead."],"~$get-react",["^ ","^6?",null,"^5",["^ ","^6","helix/core.cljs","^7",39,"^8",17,"^9",39,"^:",26,"^69","~$js/React","^J",["^K",["^6@",["^K",[[]]]]]],"^S","^3K","^6","helix/core.cljs","^:",26,"^6G",["^K",[[]]],"^6I",null,"^6H",["^K",[null,null]],"^8",1,"^6D",false,"^7",39,"^72","^77","^9",39,"^6F",0,"^69","^77","^6K",true,"^J",["^K",["^6@",["^K",[[]]]]]],"~$create-component",["^ ","^6?",null,"^5",["^ ","^6","helix/core.cljs","^7",206,"^8",7,"^9",206,"^:",23,"^J",["^K",["^6@",["^K",[["^15","~$statics"]]]]],"^R","Helper function for creating a class component. See `defcomponent`."],"^S","^3Y","^6","helix/core.cljs","^:",23,"^6G",["^K",[["^15","^79"]]],"^6I",null,"^6H",["^K",[null,null]],"^8",1,"^6D",false,"^7",206,"^72","^6:","^9",206,"^6F",2,"^6K",true,"^J",["^K",["^6@",["^K",[["^15","^79"]]]]],"^R","Helper function for creating a class component. See `defcomponent`."],"~$Fragment",["^ ","^5",["^ ","^6","helix/core.cljs","^7",19,"^8",6,"^9",19,"^:",14],"^S","^3P","^6","helix/core.cljs","^:",14,"^8",1,"^7",19,"^9",19,"^69","^6:","^R","React.Fragment. See `helix.core/<>` for macro version."],"~$extract-cljs-props",["^ ","^6?",null,"^5",["^ ","^6","helix/core.cljs","^7",161,"^8",7,"^9",161,"^:",25,"^J",["^K",["^6@",["^K",[["~$o"]]]]],"^R","A helper function for turning a props object into a CLJS map. Works with both\n  factory functions (which stores a map in a single key, \"helix/props\") and\n  normal JS objects.\n  Mostly used internally by helix, but can be useful when writing HOC."],"^S","^3N","^6","helix/core.cljs","^:",25,"^6G",["^K",[["~$o"]]],"^6I",null,"^6H",["^K",[null,null]],"^8",1,"^6D",false,"^7",161,"^72",["^F",[null,"~$clj","^6U","~$cljs-bean.core/Bean"]],"^9",161,"^6F",1,"^6K",true,"^J",["^K",["^6@",["^K",[["~$o"]]]]],"^R","A helper function for turning a props object into a CLJS map. Works with both\n  factory functions (which stores a map in a single key, \"helix/props\") and\n  normal JS objects.\n  Mostly used internally by helix, but can be useful when writing HOC."],"~$cljs-factory",["^ ","^6?",null,"^5",["^ ","^6","helix/core.cljs","^7",128,"^8",7,"^9",128,"^:",19,"^J",["^K",["^6@",["^K",[["^G"]]]]],"^R","Creates a factory function for a component defined via `defnc`, that when\n  called returns an element with the props and children passed to the factory.\n  Slightly more performant than `factory` when used with a helix component.\n\n  Use `helix.core/type` to extract the original component this was called with."],"^S","^3Q","^6","helix/core.cljs","^:",19,"^6G",["^K",[["^G"]]],"^6I",null,"^6H",["^K",[null,null]],"^8",1,"^6D",false,"^7",128,"^72","~$function","^9",128,"^6F",1,"^6K",true,"^J",["^K",["^6@",["^K",[["^G"]]]]],"^R","Creates a factory function for a component defined via `defnc`, that when\n  called returns an element with the props and children passed to the factory.\n  Slightly more performant than `factory` when used with a helix component.\n\n  Use `helix.core/type` to extract the original component this was called with."],"^6O",["^ ","^6?",null,"^5",["^ ","^6","helix/core.cljs","^7",106,"^8",4,"^9",106,"^:",9,"~:protocol","^3R","^R","Extracts the underlying type from the factory function.","^J",["^K",["^6@",["^K",[["^6P"]]]]]],"^7@","^3R","^S","^3T","^6","helix/core.cljs","^:",9,"^6G",["^K",[["^6P"]]],"^6I",null,"^6H",["^K",[null,null]],"^8",1,"^6D",false,"^7",105,"^72","^6U","^9",106,"^6F",1,"^6K",true,"^J",["^K",["^6@",["^K",[["^6P"]]]]],"^R","Extracts the underlying type from the factory function."],"~$Suspense",["^ ","^5",["^ ","^6","helix/core.cljs","^7",24,"^8",6,"^9",24,"^:",14],"^S","^2H","^6","helix/core.cljs","^:",14,"^8",1,"^7",24,"^9",24,"^69","^6:","^R","React.Suspense. See `helix.core/suspense` for macro version."],"~$signature!",["^ ","^6?",null,"^5",["^ ","^6","helix/core.cljs","^7",282,"^8",7,"^9",282,"^:",17,"^J",["^K",["^6@",["^K",[[]]]]]],"^S","^2E","^6","helix/core.cljs","^:",17,"^6G",["^K",[[]]],"^6I",null,"^6H",["^K",[null,null]],"^8",1,"^6D",false,"^7",282,"^72",["^F",["^73","^6:"]],"^9",282,"^6F",0,"^6K",true,"^J",["^K",["^6@",["^K",[[]]]]]],"^G",["^ ","^6?",null,"^5",["^ ","^6","helix/core.cljs","^7",109,"^8",7,"^9",109,"^:",11,"^J",["^K",["^6@",["^K",[["~$f"]]]]],"^R","Geven a factory function created by `helix.core/factory` or `cljs-factory`,\n  returns the original component that the factory creates elements of."],"^S","^2J","^6","helix/core.cljs","^:",11,"^6G",["^K",[["~$f"]]],"^6I",null,"^6H",["^K",[null,null]],"^8",1,"^6D",false,"^7",109,"^72","^6U","^9",109,"^6F",1,"^6K",true,"^J",["^K",["^6@",["^K",[["~$f"]]]]],"^R","Geven a factory function created by `helix.core/factory` or `cljs-factory`,\n  returns the original component that the factory creates elements of."],"~$$",["^ ","^6?",null,"^5",["^ ","^6","helix/core.cljs","^:",8,"^6C",["^ ","^6D",true,"^6E",1,"^6F",1,"^6G",[["^K",["^G","^1="]]],"^J",["^K",[["^G","~$&","^1="]]],"^6H",["^K",[null]]],"^8",7,"^7",44,"^Z",0,"^9",44,"^J",["^K",["^6@",["^K",[["^G","~$&","^1="]]]]],"^R","Create a new React element from a valid React type.\n\n  Example:\n  ```\n  ($ MyComponent\n   \"child1\"\n   ($ \"span\"\n     {:style {:color \"green\"}}\n     \"child2\" ))\n  ```"],"^S","^1<","^6","helix/core.cljs","^:",8,"^6C",["^ ","^6D",true,"^6E",1,"^6F",1,"^6G",[["^K",["^G","^1="]]],"^J",["^K",[["^G","~$&","^1="]]],"^6H",["^K",[null]]],"^6G",[["^K",["^G","^1="]]],"^6I",null,"^6E",1,"^6H",["^K",[null]],"^8",1,"^6D",true,"^6J",[["^ ","^6E",1,"^6D",true,"^69","^6U"]],"^7",44,"^72","^6U","^Z",0,"^9",44,"^6F",1,"^6K",true,"^J",["^K",[["^G","~$&","^1="]]],"^R","Create a new React element from a valid React type.\n\n  Example:\n  ```\n  ($ MyComponent\n   \"child1\"\n   ($ \"span\"\n     {:style {:color \"green\"}}\n     \"child2\" ))\n  ```"],"^6P",["^ ","^6?",null,"^5",["^ ","^6","helix/core.cljs","^7",116,"^8",7,"^9",116,"^:",14,"^J",["^K",["^6@",["^K",[["^G"]]]]],"^R","Creates a factory function for a React component, that when called returns an\n  element with the props and children passed to the factory.\n\n  Use `helix.core/type` to extract the original React component."],"^S","^30","^6","helix/core.cljs","^:",14,"^6G",["^K",[["^G"]]],"^6I",null,"^6H",["^K",[null,null]],"^8",1,"^6D",false,"^7",116,"^72","^7?","^9",116,"^6F",1,"^6K",true,"^J",["^K",["^6@",["^K",[["^G"]]]]],"^R","Creates a factory function for a React component, that when called returns an\n  element with the props and children passed to the factory.\n\n  Use `helix.core/type` to extract the original React component."],"~$assoc-some",["^ ","^6?",null,"^5",["^ ","^6","helix/core.cljs","^7",155,"^8",8,"^9",155,"^:",18,"^6[",true,"^J",["^K",["^6@",["^K",[["~$m","~$k","~$x"]]]]]],"^6[",true,"^S","^2X","^6","helix/core.cljs","^:",18,"^6G",["^K",[["~$m","~$k","~$x"]]],"^6I",null,"^6H",["^K",[null,null]],"^8",1,"^6D",false,"^7",155,"^72",["^F",[null,"^7<","^6U"]],"^9",155,"^6F",3,"^6K",true,"^J",["^K",["^6@",["^K",[["~$m","~$k","~$x"]]]]]],"~$create-element",["^ ","^S","^35","^6","helix/core.cljs","^7",29,"^8",1,"^9",29,"^:",20,"^5",["^ ","^6","helix/core.cljs","^7",29,"^8",6,"^9",29,"^:",20],"^69","^6:"],"~$register!",["^ ","^6?",null,"^5",["^ ","^6","helix/core.cljs","^7",273,"^8",7,"^9",273,"^:",16,"^J",["^K",["^6@",["^K",[["^G","~$id"]]]]],"^R","Registers a component with the React Fresh runtime.\n  `type` is the component function, and `id` is the unique ID assigned to it\n  (e.g. component name) for cache invalidation."],"^S","^37","^6","helix/core.cljs","^:",16,"^6G",["^K",[["^G","^7F"]]],"^6I",null,"^6H",["^K",[null,null]],"^8",1,"^6D",false,"^7",273,"^72",["^F",["^6:","~$clj-nil"]],"^9",273,"^6F",2,"^6K",true,"^J",["^K",["^6@",["^K",[["^G","^7F"]]]]],"^R","Registers a component with the React Fresh runtime.\n  `type` is the component function, and `id` is the unique ID assigned to it\n  (e.g. component name) for cache invalidation."]],"^20",["^ ","^V","^V","^C","^C","^1O","^1P","^1P","^1P"],"~:cljs.analyzer/constants",["^ ","^1Z",["^F",["~:children","~:key","~:ref","~:native","~:props"]],"~:order",["^7L","^7I","^7J","^7K","^7M"]],"^25",["^ ","^1[",["^F",[]],"^20",["^F",[]]],"^26",["^ ","^1H",["^ ","^O","^1S"],"^1J",["^ ","^O","^1Y"]],"^27",["^1V","^C","^1U","^1P","^1W","^1Q","^1I","^1K"]],"^U","^V","~:ns-specs",["^ "],"~:ns-spec-vars",["^F",[]],"~:compiler-options",["^43",[["^7Q","~:static-fns"],true,["^7Q","~:shadow-tweaks"],null,["^7Q","~:source-map-inline"],null,["^7Q","~:elide-asserts"],false,["^7Q","~:optimize-constants"],null,["^7Q","^2<"],null,["^7Q","~:external-config"],null,["^7Q","~:tooling-config"],null,["^7Q","~:emit-constants"],null,["^7Q","~:load-tests"],null,["^7Q","~:form-size-threshold"],null,["^7Q","~:global-goog-object&array"],null,["^7Q","~:data-readers"],null,["^7Q","~:infer-externs"],"~:auto",["^7Q","^2>"],null,["~:js-options","~:js-provider"],"~:shadow",["~:mode"],"~:dev",["^7Q","~:fn-invoke-direct"],null,["^7Q","~:source-map"],"/dev/null"]]]